# templates/grafana.yml
{{- if .Values.grafana.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  type: {{ .Values.grafana.service.type }}
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: {{ .Values.grafana.service.port }}
      targetPort: 3000
      {{- if eq .Values.grafana.service.type "NodePort" }}
      nodePort: {{ .Values.grafana.service.nodePort }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
spec:
  replicas: {{ .Values.grafana.replicaCount }}
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        volumeMounts:
          # 1. Mount the datasource provider config
          - name: grafana-datasources
            mountPath: /etc/grafana/provisioning/datasources
          # 2. Mount the dashboard provider config
          - name: grafana-dashboards
            mountPath: /etc/grafana/provisioning/dashboards
          # 3. Mount the actual dashboard JSON file
          - name: grafana-dashboard-json
            mountPath: /var/lib/grafana/dashboards
        image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: {{ .Values.grafana.resources.requests.cpu }}
            memory: {{ .Values.grafana.resources.requests.memory }}
          limits:
            cpu: {{ .Values.grafana.resources.limits.cpu }}
            memory: {{ .Values.grafana.resources.limits.memory }}
      volumes:
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
        - name: grafana-dashboard-json
          configMap:
            name: grafana-dashboard-json
{{- end }}