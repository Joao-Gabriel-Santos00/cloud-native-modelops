# templates/model-server.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: model-server-config
# The data is now static because it just points to other services.
# We could template this too, but this is simple and clear.
data:
  MLFLOW_TRACKING_URI: "http://mlflow-service:5000"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  MLFLOW_S3_ENDPOINT_URL: "http://minio-service:9000"

---

apiVersion: v1
kind: Service
metadata:
  name: model-server-service
spec:
  type: NodePort
  selector:
    app: model-server
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
      # Use the port from values.yaml
      nodePort: {{ .Values.modelServer.service.nodePort }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-server-deployment
spec:
  # Use replica count from values.yaml
  replicas: {{ .Values.modelServer.replicaCount }}
  selector:
    matchLabels:
      app: model-server
  template:
    metadata:
      labels:
        app: model-server
    spec:
      containers:
      - name: model-server
        # Build image name from values.yaml
        image: "{{ .Values.modelServer.image.repository }}:{{ .Values.modelServer.image.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        ports:
        - containerPort: 8000
        readinessProbe:
          httpGet:
            path: /health # The endpoint to check
            port: 8000
          # Use the values from our values.yaml file
          initialDelaySeconds: {{ .Values.modelServer.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.modelServer.probes.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.modelServer.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.modelServer.probes.readiness.failureThreshold }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          # Use the values from our values.yaml file
          initialDelaySeconds: {{ .Values.modelServer.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.modelServer.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.modelServer.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.modelServer.probes.liveness.failureThreshold }}
        resources:
          requests:
            cpu: {{ .Values.modelServer.resources.requests.cpu }}
            memory: {{ .Values.modelServer.resources.requests.memory }}
          limits:
            cpu: {{ .Values.modelServer.resources.limits.cpu }}
            memory: {{ .Values.modelServer.resources.limits.memory }}
        envFrom:
        - configMapRef:
            name: model-server-config
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              # Use the secret name from values.yaml
              name: {{ .Values.minio.existingSecret }}
              key: MINIO_ROOT_USER
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              # Use the secret name from values.yaml
              name: {{ .Values.minio.existingSecret }}
              key: MINIO_ROOT_PASSWORD